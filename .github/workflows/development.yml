name: Upload staging website

on:
  push:
    branches: ["development"]
  pull_request_target:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch (safe)
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setting up python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'
          cache: 'pip'
      - run: pip install -r requirements.txt

      - name: Build static page
        run: make build

      - name: Check if PR is from a fork
        id: check_fork
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "PR is from a fork, skipping S3 upload."
            echo "skip_s3=true" >> $GITHUB_ENV
          else
            echo "PR is from origin, ok for S3 upload."
            echo "skip_s3=false" >> $GITHUB_ENV
          fi

      - name: Upload to s3
        if: env.skip_s3 != 'true'
        uses: jakejarvis/s3-sync-action@master
        env:
          SOURCE_DIR: tmp
          AWS_S3_BUCKET: 'pyconde-pydata-2025-staging'
          AWS_REGION: 'eu-central-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Post Staging URL as PR Comment
        if: env.skip_s3 != 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            const stagingUrl = "http://pyconde-pydata-2025-staging.s3-website.eu-central-1.amazonaws.com/";

            github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: `ðŸš€ The staging site is live! [View here](${stagingUrl})`
            });
