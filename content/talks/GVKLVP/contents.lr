title: The Open-Meteo Weather API - Data Version Control Built with Python
---
created: 2024-12-18
---
code: GVKLVP
---
speaker_names: Einat Orr
---
abstract:

We will explore how to add data versioning to an ML project; a simple end-to-end rain prediction project for the Munich area. The data assets will be stored in an OSS repository built for data projects, and we will use its lakeFS-spec Python package for easy interaction with other Python libraries. Following model training with initial data, we will update the dataset and retrain the model. Finally, we will revert to the initial data version to reproduce the original model and assess its initial accuracy.
---
full_description:

Data version control is the backbone of modern machine learning (ML) projects, as it allows ML practitioners to systematically track different versions of data sets, which are used for training and validating ML models.

In this talk, we will demo how a common and open source Python stack was leveraged to build a simple end-to-end rain prediction ML project, using the Open-Meteo API that trains a Random Forest Classifier** model. 

This talk will walk through how to leverage the lakeFS-spec Python package for fsspec - that streamlines versioned data operations for Python developers in data science use cases, enabling easy access and versioning of objects from popular Python libraries like Pandas, Numpy, Polars, DuckDB, PyArrow, with just one or two lines of code. The code example will include model training with initial data, updating the dataset and retraining the model. We'll wrap up by reverting to the initial data version to reproduce the original model and assess its initial accuracy, all this through common open source tooling built for Python and PyData stacks.


This exapmle will enable user to reap the following benefits:
- High-level abstraction over basic repository operations
- Convenient access to the underlying block storage, in addition to lakeFS versioning operations
- Seamless integration into the fsspec ecosystem
- Accessing objects in lakeFS directly from popular data science libraries (e.g., Pandas, Numpy, Polars, DuckDB, PyArrow) with just one or two lines of code
- Transaction support for conducting data version control operations in a conscious and reliable way
- Zero-config option through config autodiscovery
- Caching to avoid unnecessary data transfers
