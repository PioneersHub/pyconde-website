title: Introduction to Creating Unit Tests for PySpark Applications Using unittest and pytest Libraries
---
created: 2024-12-12
---
code: VUUCMK
---
speaker_names: Mete Can Akar
---
abstract:

Software testing, and in particular, unit testing, is a crucial step in modern Data Engineering. Pytest and unittest are great tools for developing unit tests for PySpark applications. In this talk, I will provide code examples using both libraries. Also, I discuss the advantages and disadvantages that each of them brings.
---
full_description:

1. Introduction
In this session, I will talk about how we can create unit tests for PySpark applications using Python unittest and pytest libraries. Before jumping into the topic, it makes sense to talk briefly about what testing is in Software Development, what types of tests exist, what unit testing is and why it is even needed?

2. What is Testing in Software Development?
Testing in software development refers to the process of evaluating and verifying that a software program or application works as intended. It’s a crucial step in the software development life cycle, ensuring that the software meets specified requirements and is free of defects or bugs that could adversely impact its performance, reliability or security.

In this session, I won’t go into details of the benefits of testing and Test Driven Development (TDD). But as a data engineer/data scientist/ML engineer (i.e., data person) you should care about the quality of the software you are building. However, I will still briefly talk about the importance of unit testing below.

2.1 What are the Test Types?
There are numerous types of tests in software development, each designed for a specific purpose and stage in the development process. The most commonly implemented test types are:

Unit Testing: These are the smallest tests which validate that an individual component (e.g., function) of the software works as intended. That’s why it is expected to run the unit tests in the Continuous Integration (CI) pipeline such as after each commit or when a PR is opened depending on your DevOps workflow.

Integration Testing: These tests check if multiple components work well together. The number of integration tests is less than unit tests but higher than E2E tests. They also take longer to execute than unit tests but take less time than E2E tests. Integration tests can also be included in the CI pipeline (e.g., when PR opened into develop and/or master). Since the decision of when to run which test and which branch strategy to use are DevOps-related topics, I won’t dive into this topic for now.
End-to-End Testing: Checks the application flow from beginning to end making sure that everything works well. This is very costly and most of the time done manually (especially at the beginning of the development) in the data engineering world. It is also possible to automate E2E tests but the execution time will still be much longer than other types of tests. Be aware that, in the Web and Mobile Development contexts E2E testing is different where the goal is to simulate real user actions using various tools.

2.2 Understanding Unit Testing and Its Importance
Unit testing is one of the foundational aspects of software development. At its core, a unit test is a piece of code written to test a specific function or module in isolation from other parts of the application. The primary goal is to validate each unit (e.g., a function).

2.3 What are the Purposes of the unittest and pytest Libraries?

unittest is a built-in Python testing library that follows the xUnit style and provides a test framework along with test discovery.
pytest is a popular third-party testing library for Python that offers a flexible and concise way to write tests.

Demo time.


2.4 How Can I Execute These Tests?
Demo time.

2.5 Summary and Comparison
Compare the advantages and disadvantages of pytest and unittest libraries

3. Conclusion
This was an introduction to testing in software development and in particular unit testing for PySpark applications. Of course, there are many more details to be covered such as mocking, pytest plugins, pytest conftest.py which is used for sharing fixtures across multiple files etc…Please let me know if you are interested in more advanced topics and I will try to cover these.

To conclude, both libraries are great for developing unit tests for PySpark applications and in general for Python applications. You should choose depending on your needs and familiarity in both tools. If you are just starting with unit testing in Python, I would personally recommend to start with the unittest library first, especially if you already have experience with JUnit. Then move to pytest once you feel more comfortable.
