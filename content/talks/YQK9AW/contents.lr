title: Pyscript, chart.js, bootstrap and fastapi. A match made in heaven
---
created: 2025-01-05
---
code: YQK9AW
---
speaker_names: Jens Nie
---
abstract:

This is another talk from the continuing series of "What does it actually take to make ...".

This time we're covering what it takes to display data streams in a web based environment in order to have an overview of the current state of a system or track its behaviour over time.

This is a central component in smart home systems such as Home Assistant, or in monitoring environments for example built on top of influx and grafana.

If you're interested in how these things basically work, then you're in luck these days, as many solutions in this area are open source, and you just can take a look at the sources. But let's be honest, this isn't entirely true given a code base of many million lines of code in some cases. 

Well you might be able to go back to version 0.0.1 ...

On the other hand there might as well be a talk to cover the basic concepts of what it takes to make a version 0.0.x for such a thing.

And this is the talk ;-)
---
full_description:

Probably due to my scientific background I'm very interested in monitoring my home. I'm looking for ways to track my power meter readings to get an idea of current energy consumption. I would like to know about the solar revenue of my rooftop power plant. I like to be aware of the costs to heat my house in the winter, and how temperature and humidity develops in some rooms of my house. 

You certainly can buy readymade solutions for this. For the sensors needed, for the data storage and also for displaying and analysing the data collected.

I am on the other hand interested in how these things work, and what it takes to make my own version of it.

And I would like to have a system that I can host myself, where everything fits together neatly. For this ideally everything is based on Python. 

For most components involved it was quite simple to generate a Python based solution. This was even true for data display on the desktop. For more practical web based solutions however this was tricky before.

But PyScript changed the world completely here.

It can be seen as an alternative to JavaScript for web based applications. It allows to have a Python Interpreter running in your Web-Browser with full control over the currently displayed web page, which makes it intriguing to let Python generate and manage the whole page and take care of handling and retrieving all data for display. 

Together with fastapi on the server side, which delivers both the PyScript environment and the data for the display, a thin wrapper around chart.js to make things a bit more pythonic and Bootstrap to create nice looking responsive pages, this allows to create a visually pleasing, yet powerful web based real time data display, which can quite easily be understood.
---
room: 
---
day: 
---
start_time: 
---
track: PyData: Visualisation & Jupyter
