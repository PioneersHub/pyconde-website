title: From RAGs to riches: Advanced Retrieval with Python
---
created: 2024-12-18
---
code: 7XDAVM
---
speaker_names: Dominik Haitz
---
abstract:

**RAG (Retrieval-Augmented Generation)** is one of the most common application of LLMs, often used for e.g. question-answering systems based on non-public data. In its basic form ("Naive RAG"), a user query is compared to documents in a database, with matching entries included in the prompt to generate an answer.

However, **relevant documents might not be found**, decreasing the quality of the result or preventing a correct answer. To remedy this, many **advanced RAG methods** exist.

In this talk, different chunking and indexing methods, query rewriting, hybrid search and knowledge graphs, result re-ranking and RAG evaluation metrics **will be described and shown how to be used in Python**.

Afterwards, you will be able to **improve the performance of your RAG system** as you are able to identify weaknesses and apply the proper methods for improvement.
---
full_description:

This talk will start with a basic RAG example, identify weaknesses and show several methods for improvement. Implementation examples in Python will be shown for most techniques.

Outline:
- Naive RAG
- Evaluation of RAG performance: metrics and LLM-as-a-judge
- Prepare Embeddings & Vectorstore
  - Different vector stores
  - Indexing (RAPTOR)
- Query Enhancement
  - Query Rewriting
  - Hypothetical Document Embedding (HyDE)
  - Query Decomposition
- Improved Search
  - Hybrid Search
  - Filters
- Post-Retrieval
  - Reranking
  - Self Route
