title: Go Beyond Basic RAG with Agentic Behavior
---
created: 2024-12-22
---
code: VYL7AU
---
speaker_names: Bilge Yücel
---
speakers:


### Bilge Yücel

Bilge is a Developer Relations Engineer at deepset, working with Haystack. She studied Computer Science and Engineering at Sabanci University. With over two years of experience as a Software Engineer, she developed a strong interest in AI and pursued a master's degree in Artificial Intelligence at KU Leuven with a focus on NLP. Now, she enjoys working with Haystack and helping the community build custom LLM applications ✨

---
abstract:

RAG has transformed AI systems by combining retrieval and generation, but traditional workflows often struggle with the dynamic demands of real-world applications, such as multi-step queries or integrating external APIs. Agentic behavior enhances RAG by enabling LLMs to make decisions, call tools, and adapt workflows dynamically. In this talk, we’ll define agentic behavior, explore its core features such as routing, tool integration, and reasoning, and demo its practical implementation in Python using Haystack.
---
full_description:

Retrieval-Augmented Generation (RAG) has transformed how we build AI systems with Large Language Models (LLMs) by combining the strengths of retrieval and generation. However, traditional RAG workflows are static and often struggle to handle the dynamic and complex demands of real-world applications, such as answering multi-step queries, integrating external APIs, or gracefully recovering from retrieval failures. Agentic behavior addresses these challenges by extending RAG pipelines, enabling LLMs to make decisions, integrate tools, and dynamically adapt workflows.

In this talk, we’ll explore how agentic behavior enhances RAG pipelines. We’ll define what it means for a system to act as an “agent” and cover core concepts like routing, tool calling, and reasoning. Using hands-on examples implemented in Python with Haystack, we’ll walk through practical use cases, such as integrating external APIs and solving multi-step problems. Finally, we’ll tackle challenges like transparency in complex systems and share how graph-based approaches can make these workflows more interpretable.

### Outline:

1. Intro of the speaker (1 min)
2. Introduction to RAG (3 mins)
    - Overview of RAG
    - its capabilities and its key limitations
    - Some examples of complex tasks
3. Agentic Behavior (7-8 mins)
    - Definition & Core Characteristics
    - Reasoning, tool calling, dynamic adaptation of workflows (routing)
    - How these characteristics improve RAG pipelines
4. Practical Implementation in Haystack (10 min)
    - Intro to Haystack and key components to use in the demo: retrieval, generation (3 mins)
    - Show how to implement agentic behavior using Haystack
    - Step-by-step demonstration of an agent calling external APIs and performing multi-hop reasoning
5. Addressing Challenges in Complex Systems (3 min)
    - Challenges of understanding complex, dynamic workflows
    - How graph-based approaches provide clarity and control
6. Conclusion and Q&A (5 min)
---
room: 
---
day: 
---
start_time: 
---
track: Generative AI
---
python_skill: 
---
domain_expertise: 
---
social_card_image: /static/media/social/talks/VYL7AU.png

