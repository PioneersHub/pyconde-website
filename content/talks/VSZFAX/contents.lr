title: Python packages, extension modules, and how it achieves cross-platform compatibility
---
created: 2024-12-21
---
code: VSZFAX
---
speaker_names: Shivashis Padhi
---
abstract:

Have you ever `pip install <package>` and got cryptic stacktraces like this

```
$ pip install mysqlclient
 ...
        File "setup.py", line 27, in find_package_name
          raise Exception(
      Exception: Can not find valid pkg-config name.
      Specify MYSQLCLIENT_CFLAGS and MYSQLCLIENT_LDFLAGS env vars manually
...
error: subprocess-exited-with-error

 ```
 
 As a next step, you would paste this log on the internet, the answer might include you installing a native package like `apt install libmysqlclient-dev` and the issue resolves.
  
 In this talk, we'll discuss about Python Packages, why such issues arise during their installation, why it's complex to have `pip install(s)` working the same way in every computer, and how can one deal with them in an efficient manner.
---
full_description:

## Talk Outline with timestamps
 
 - Introduction (2 minutes)
 - How does software get distributed in the Python ecosystem? (2 minutes)

     - We'll look at how a python package is built in a maintainer's computer, how it's uploaded to pypi and how it's installed in the user's computer.

 - Where does complexities arise in software distribution? (2 minutes)
     - We'll talk briefly about how the Python runtime works, how different are pure python module and extension modules regarding how they are run.
 - Types of Python Packages (3 minutes)
     - This section involves explaining what is sdist, what is a wheel, and how they are structured?
 - What are extension modules, and why should you care? (3 minutes)
     - Introduction to extension modules and how Python runs functions from extension modules?
 - Let's look at some extension modules! (3 minutes)
     - Demonstration involving creation of a few types of extension modules and analyzing their wheels.
 - Wheels in the wild. (5 minutes)
     - We'll go through some packages like cryptography, psycopg2, yarl, ultrajson, lxml to see how their wheels are built.
 - How can you use this information? (2 minutes)
     - We'll summarize our learnings and note the takeaways.
 - Q&A - (5 minutes)
 
 ## Talk Outcome
 
 After attending this talk, a intermediate Python Developer should be able to understand how a python module is packaged and distributed, including extension modules, and reason about many package installation errors making them more productive.
