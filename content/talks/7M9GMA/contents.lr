title: Think Abstract, Code Smart: Achieving Maintainability and Scalability in Python
---
created: 2024-12-20
---
code: 7M9GMA
---
speaker_names: Kateryna Budzyak, Evelyne Groe
---
abstract:

This talk will explore how abstraction can transform your Python code into a more maintainable and readable masterpiece.
As the number of projects grows, maintaining clean code becomes increasingly challenging. You will also see how the usage of abstraction ensures smoother integration, as the internal changes do not affect the code's external usage. This makes projects more maintainable and resilient to changes, as you can hide complex implementations and expose intuitive usage across all applications. Also as different applications might share a lot of code you can see how abstraction of the key concepts code decreases code duplication.
Join this session to learn practical techniques for code abstraction and discover how it fosters adaptability and long-term resilience in your code base.
---
full_description:

Have you ever found yourself in a situation where you jumped back and forth in a Python project to adjust the code to a new feature? With increasing project complexity, maintaining and scaling them becomes increasingly difficult. Especially **data scientists and machine learning engineers** face such challenges while testing and deploying new models. It’s even harder when you have to deal with legacy systems you didn’t deploy. This talk will explore how **abstraction, a core principle of object-oriented programming (OOP)** can make your implementation process easier as you can focus on specific code without breaking the external usage of the module. Using the examples of features and model abstraction for different search ranker systems you will learn how you can create reusable modular components that are easier to maintain, scale and share. 

Using practical examples, this talk will emphasize the usage of abstraction and covers following topics:
**Definition and Core Principles of Abstraction in Python:** 
Overview of the abstract base class in python and how to use them
**Scalability and Maintainability:** 
How abstraction keeps your code base organized and adaptable as your projects evolve. 
**Integration:** 
Abstracting key concepts of projects ensures less breaks, since the external usage of the modules remains the same. You can focus on code complexity without spending too much time on integration. 
**Code Deduplication:** 
A lot of functionalities can be shaped as abstract modules which can be shared across projects. 

Join to discover how abstract thinking can boost your Python coding game and make collaboration more fun.
---
room: 
---
day: 
---
start_time: 
---
track: PyCon: Programming & Software Engineering
