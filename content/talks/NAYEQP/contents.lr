title: Dependency management, but enjoyable and without the mess: Meet uv
---
created: 2024-12-21
---
code: NAYEQP
---
speaker_names: Samuel López Santamaría
---
abstract: Have you ever been in the “educational” situation where your carefully crafted venv refused to install as soon as your colleague tried it on a different OS?

Have you ever happily installed dependencies from requirements.txt, only to be greeted later by obscure warnings from some random library—because, for example, you used Python 3.9 instead of Python 3.10?

Have you ever felt your heart rate spike at the thought of running conda install in an environment full of pip installs?

Yeah, me too. And not only once. 

Maybe you’ve heard about the new cool kid in town, `uv`. I recently gave it a try and it was instant love - I have never gotten that excited about a Python tool in my life!

In this talk, I’ll share my first-hand experience with `uv` as a data scientist: how I use it, how it simplifies dependency management, and the cool Python features I discovered while tinkering with it. Since uv is (practically) inseparable from `pyproject.toml`, we’ll also learn about this fantastic standard and how using both together can make deploying your code a breeze.

DISCLAIMER: I am in no way associated with `uv`’s authors. I just think they built a phenomenal tool. All opinions expressed here are my own.
---
description: Have you ever been in the “educational” situation where your carefully crafted venv refused to install as soon as your colleague tried it on a different OS?

Have you ever happily installed dependencies from requirements.txt, only to be greeted later by obscure warnings from some random library—because, for example, you used Python 3.9 instead of Python 3.10?

Have you ever felt your heart rate spike at the thought of running conda install in an environment full of pip installs?

Yeah, me too. And not only once. 

Maybe you’ve heard about the new cool kid in town, `uv`. I recently gave it a try and it was instant love - I have never gotten that excited about a Python tool in my life!

In this talk, I’ll share my first-hand experience with `uv` as a data scientist: how I use it, how it simplifies dependency management, and the cool Python features I discovered while tinkering with it. Since `uv` is (practically) inseparable from `pyproject.toml`, we’ll also learn about this fantastic standard and how using both together can make deploying your code a breeze.

Want more details? Here are some of the things we’ll talk about:

**The Pain(s): Current situation in typical Data Science projects**

How data science teams out there typically deal with dependency management, and the issues that arise time and again.

**Using `uv`**

We’ll dive into how to:
- Install uv.
- Initialize a project.
- Add dependencies.
- Work with dependency groups.

**`pyproject.toml` and `uv.lock`**

As soon as you run `uv init` you’ll see these files. But who are these guys? You’ll end up loving them.

**Syncing and locking - What’s the difference?**

`pip intall -r requirements.txt` et al are replaced by an incredibly elegant `uv sync`. But there is `uv lock` as well. And `uv pip install`. When do you need each?

**`uv run` - Or an entire wishlist come true in six characters**

This is one of my personal highlights. `uv run` stands for “No Python installed? Not my problem. Just handle everything and run my code already”. Could you ask for anything more?

**Take-home sample repo**

I’ll share a repo with you where you can try all of the above in your own machine!

**The Takeaways**

1. A clear understanding of `uv` for dependency managament and how it solves common issues.

2. Insights into `pyproject.toml` and `uv.lock` — what they are, why they matter, and how they make projects more maintainable.

3. Practical knowledge of `uv` commands like `uv sync`,`uv lock`, and `uv run`.

4. A sample project repo to start experimenting right away.

DISCLAIMER: I am in no way associated with `uv`’s authors. I just think they built a phenomenal tool. All opinions expressed here are my own.
