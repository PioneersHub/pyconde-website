title: Effortless Testing in Resource-Intensive Data Applications
---
created: 2024-11-28
---
code: BERGKY
---
speaker_names: Patrik Hlobil
---
abstract:

Testing data-driven applications often involves significant overhead due to the setup and teardown of resource-intensive systems like databases and cloud services. This talk will explore practical strategies for designing integration and system tests with **pytest** to minimize these inefficiencies. By leveraging techniques to decouple tests while maximizing resource reuse, you’ll learn how to enhance your testing process, improving performance, scalability, and test isolation in your own projects.
---
full_description:

Fast and reliable tests are the backbone of maintaining quality and performance in data-heavy applications, where even small issues can cascade into significant bottlenecks or failures. A streamlined testing process allows developers to confidently evolve complex systems while ensuring robustness and efficiency.

For integration and system tests in data-driven applications, the setup and teardown of data layers (e.g., databases, blob storage) often take more time than the actual test execution. A common approach is to use session-scoped test resources, but this introduces shared dependencies that couple tests together. As a result, developers must carefully manage resource cleanup after each test to prevent interference, leading to tests that are often flaky, verbose, and harder to maintain.

This talk will demonstrate how to leverage pytest fixtures to abstract setup and teardown logic across both session and function scopes. This method ensures proper resource cleanup, improves test isolation, and enhances test readability and development efficiency. We’ll also explore strategies for parallelizing test execution while sharing system resources effectively, enabling faster and more scalable testing.

This talk is designed for intermediate to advanced Python developers with a strong interest in testing and improving their development workflows.
---
room: 
---
day: 
---
start_time: 
---
track: PyCon: Testing
