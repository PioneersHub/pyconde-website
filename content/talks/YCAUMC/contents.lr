title: Django's Dilemma: Balancing Simplicity with Scalability
---
created: 2024-11-28
---
code: YCAUMC
---
speaker_names: Anette Haferkorn
---
speakers:


### Anette Haferkorn

Anette Haferkorn is a dedicated software engineer with a focus on backend development using Python, Ruby, Java, and Golang. Since 2019, she has refined her skills in full-stack development, employing TypeScript and React.js for frontend solutions and leveraging cloud technologies for seamless deployment. She is known for her expertise in software architecture, particularly with the C4 Model methodology.
Currently, Anette is thriving at Qonto, contributing to Europe's leading business finance solution that empowers SMEs and freelancers. Her previous role at Reveal saw her promoted to Scrum Master, where she successfully scaled the team into cross-functional squads and implemented agile practices to boost performance and satisfaction. Anette is also passionate about mentoring, actively guiding women in tech through CoffeeCodeBreak on software engineering and agile leadership.
Her freelance work includes developing a WordPress portal for a German healthcare service and leading a digital transformation initiative for a non-profit organization. As a Tech Lead at Kultur vivante, she scaled a diverse team and pioneered digital cultural projects. Anette holds a Bachelor of Arts in computer science and musicology from Hochschule f√ºr Musik Karlsruhe, complementing her technical prowess.
Fluent in multiple languages and certified as a Professional Scrum Master (PSM I), Anette champions modern software engineering practices like Domain-Driven Design (DDD) and test-driven development (TDD). Her publication on Scrum Masters as partnership managers highlights her ability to bridge product and tech domains, fostering collaboration and innovation.

---
abstract:

Django's model-view-serializer approach works great for small apps, but as projects grow, you might face challenges like scattered database operations and APIs that are too closely linked to your database models. These issues can make unit testing and scaling harder. I'll share real-world examples of these problems and show how to refactor an app using ideas from Domain-Driven Design (DDD) and hexagonal architecture. We'll look at a before-and-after example to see how these changes can make your app easier to use and debug. Plus, we'll discuss when Django's simplicity is enough and when it's worth adopting a more structured approach. You'll leave with practical tips for transforming your Django projects into systems that can handle increased complexity.
---
full_description:

Django's model-view-serializer framework is a powerful tool for building small to medium-sized applications quickly and efficiently. Its straightforward approach allows developers to create CRUD operations with minimal effort, making it an excellent choice for projects with clear and simple requirements. However, as applications grow in complexity and scale, developers often encounter several challenges that can hinder the application's maintainability and scalability.
One common issue is the scattering of database operations across the codebase. This pattern often leads to tightly coupled APIs and database models, making it difficult to isolate logic for individual testing and increasing the fragility of the application as it scales. As database logic becomes intertwined with business logic, maintaining and expanding the application becomes increasingly challenging.
In this talk, we will explore these common pitfalls through real-world examples and demonstrate how to refactor a Django application for improved scalability and maintainability. Using a webhook server app as a case study, we'll discuss how client-driven response customization can complicate the traditional model-view-serializer approach. We'll explore the limitations of handling complex serialization and response formatting within the view layer, which often results in bloated views that are hard to test and scale.
To address these challenges, we'll introduce concepts from Domain-Driven Design (DDD) and hexagonal architecture. By applying these principles, we can decouple the application's components, making it easier to manage and extend. We'll refactor the application using a builder pattern for payload formatting, ensuring that response structures are flexible yet maintainable. Additionally, we'll introduce an injected service layer and a repository layer, which separate concerns and allow for more targeted unit testing. This architecture not only improves testability but also enhances the application's ability to adapt to changing requirements.
We'll provide a clear before-and-after comparison, highlighting the benefits of this refactored approach. Attendees will learn how these changes can lead to cleaner, more scalable code that is easier to debug and maintain. We'll also discuss the balance between Django's simplicity and the need for more sophisticated architecture, helping developers decide when it's appropriate to adopt these patterns.
By the end of this session, attendees will gain practical insights into transforming their Django projects into robust systems capable of handling increased complexity. Whether you're a developer working on scaling an existing application or someone interested in learning more about advanced architectural patterns, this talk will provide valuable takeaways and actionable strategies for improving your Django applications.
---
room: 
---
day: 
---
start_time: 
---
track: Django & Web
---
python_skill: 
---
domain_expertise: 
---
social_card_image: /static/media/social/talks/YCAUMC.png

