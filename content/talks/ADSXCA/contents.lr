title: Where have all the post offices gone? Discovering neighborhood facilities with Python and OSM
---
created: 2024-12-20
---
code: ADSXCA
---
speaker_names: Katie Richardson
---
abstract:

When it comes to open geographic data, [OpenStreetMap](https://www.openstreetmap.org/) (OSM) is an awesome resource. Getting started and figuring out how to make the most out of the data available can be challenging.

Using a personal example: frustration at the apparent lack of post offices in my neighborhood, we'll walk through examples of how to parse, filter, process, and visualize geospatial data with Python.

While this talk is aimed at those beginning with geographic data, it would be helpful to have some background knowledge about Python and data handling.

At the end of this talk, you will know how to process geographic data from OpenStreetMap using Python and find out some surprising info that I learned while answering the question: _Where have all the post offices gone?_
---
full_description:

### Problem statement and brief introduction
4 minutes

- Needing an international postcard stamp, I headed to my nearest post office only to find out that it was permanently closed, the latest closure among others in recent memory. Was this just in my neighborhood or was this happening all over the state? To answer these questions, I turned to open data and Python.
- What is OpenStreetMap?

### How can we identify types of places, like post offices and districts, in OSM data?
6 minutes

- OSM data can be broken down into three elements: nodes, ways and relations.
- Tags are key value pairs which are used to describe an element's features.
- Brief discussion of tools ([Overpass API](https://overpass-api.de/), [overpass turbo](https://overpass-turbo.eu/)) for diving into the data to get an idea of how it is structured and how to construct queries

### How can we access the raw OSM data and work with it in Python? 
8 minutes

How many post offices are there in each neighborhood? What about by area or population?

- We can download data extracts for a region or the entire planet! PBF files are designed to be space efficient, which is important since files for regions, like entire continents, can contain a massive amount of data.
- For parsing and processing the PBF files, we can use the Python library [PyOsmium](https://osmcode.org/pyosmium/). In this step, we'll look at how to create two filters: one for the administrative boundary (district or neighborhood) and another for the facility (post office).
- Use [GeoPandas](https://geopandas.org/) to store the data in a GeoDataFrame. In this step, we'll look at how to approximate the administrative boundary's area in square kilometers and how to determine which post offices are within which boundary area.

### What are some tools for visualizing the data?
4 minutes

How can we make an interactive plot of post offices in each neighborhood? What about other facilities and resources?

- Plot boundaries directly from a GeoDataFrame
- Use [Bokeh](https://docs.bokeh.org), which supports geographical data with `GeoJSONDataSource`. In this step, all of the pieces will come together in an interactive map of the number of total post offices by neighborhood and the post offices per square kilometer by neighborhood. 

### Summary
3 minutes

- Review the steps we've taken: parsing and filtering, processing, plotting.
- Brief mention of how we can wire all the pieces together. All the code and resources used in this talk will be available on my public GitHub.

### Time for questions
5 minutes
---
room: 
---
day: 
---
start_time: 
---
track: PyData: Data Handling & Engineering
